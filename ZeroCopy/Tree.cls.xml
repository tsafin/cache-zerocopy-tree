<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="ZeroCopy.Tree">
<Description>
Experimental class to support connected tree forest</Description>
<IncludeCode>Service.DocTreeDefault</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>64169,63548.890846</TimeCreated>

<Property name="TempGlo">
<Description>
By default uses @TempGlo PPG storage or the whole forest (i.e. it's redirected to CACHETEMP)
You could use any local or global for those purposes</Description>
<Type>%String</Type>
<InitialExpression>$$$DOCTREEDEFAULT</InitialExpression>
</Property>

<Property name="DefaultValue">
<Description>
Property allows to reefine default value for undefined tree nodes
Empty string is default, but you are free to change it</Description>
<Type>%String</Type>
</Property>

<Property name="AutoCleanup">
<Description>
Cleanup all created trees upon object closure</Description>
<Type>%Boolean</Type>
<InitialExpression>$$$OK</InitialExpression>
</Property>

<Property name="KnownTrees">
<Description>
Root pointers for all known so far named trees,
i.e. for $this.DocumentContent it would be i%KnownTrees("DocumentContent") pointing to 
the ..TempGlo subtree </Description>
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
<Private>1</Private>
</Property>

<Property name="XlatedSubsCache">
<Description>
cache of recently translated/walked subscripts
might point to differennt global altogether
TODO - limit cache size to N recentmost walks</Description>
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
<Private>1</Private>
</Property>

<Property name="KeepObjects">
<Description>
we need to keep opened [and their storage retained]
all zerocopy objects we were merged with. 
So keep object handy, increasing their reference counters</Description>
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
<Private>1</Private>
</Property>

<Method name="%OnClose">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ..AutoCleanup {
		#dim trees As %String = $order(..KnownTrees(""))
		while trees '= "" {
			set next = $order(..KnownTrees(trees))
			kill @..CalcTreeGloRef(..KnownTrees(trees))
			set trees = next
		}
		// NB! ..KeepObjects(*) array will be cleaned up automatically
		// and their objects temp trees will be removed upon all reference closed
	}
	return $$$OK
]]></Implementation>
</Method>

<Method name="ReserveTree">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim gloRef As %String = ..TempGlo
	#dim i As %integer = $Increment(@gloRef)
	
	return $name(@gloRef@(i))
]]></Implementation>
</Method>

<Method name="AddTree">
<FormalSpec>Name:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// i.e. for DocumentContent we will have root node incremented
	// ^||DocTree = 1
	// and gloref pointer saved to KnownTrees array
	// i%KnownTrees("DocumentContent") => ^||DocTree(1)
	
	#dim gloRef As %String = ..ReserveTree()
	set ..KnownTrees(Name) = gloRef
	return gloRef
]]></Implementation>
</Method>

<Method name="DumpTree">
<Description>
Dump particularly named tree branch</Description>
<FormalSpec>Name:%String</FormalSpec>
<Implementation><![CDATA[
	#dim gloRef As %String = $get(..KnownTrees(Name))
	if gloRef '= "" {
		zwrite @gloRef
	}
]]></Implementation>
</Method>

<Method name="PurgeAllTrees">
<Description>
Kill temporary storage for all existing trees kept in the @TempGlo. Don't use it! </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>TempGlo:%String=$$$DOCTREEDEFAULT</FormalSpec>
<Implementation><![CDATA[	kill @TempGlo
]]></Implementation>
</Method>

<Method name="CalcTreeGloRef">
<Description>
Given arguments as subscripts, the @TreeGloRef as root of storage
return the final global reference (no check for existence), also
pass back the calculated @encodedSubs as binary key</Description>
<FormalSpec><![CDATA[TreeGloRef:%String="",&encodedSubs:%List,Args...]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// nothing to start from, bail out
	if TreeGloRef = "" {
		return ""
	}
	#dim i As %Integer
	// TODO - extract to walk() function
	// convert args to proper subscripts syntax, 
	// calculate their encoded hash string along a way
	for i=1:1:$get(Args) {
		set TreeGloRef = $name(@TreeGloRef@(Args(i)))
		set encodedSubs = encodedSubs _ $lb(Args(i)) // TODO - encode using NLS normalization via $zu(70,*)
	}

	return TreeGloRef
]]></Implementation>
</Method>

<Method name="RetainObjectsRef">
<Description>
increment reference to the object to make sure it will be kept
around till our own closure</Description>
<FormalSpec>Value:%RegisteredObject</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	#dim stringified As %String = ""_Value
	if '$get(..KeepObjects(stringified)) {
		set ..KeepObjects($increment(..KeepObjects)) = Value 	// incRef over Value object 
		set ..KeepObjects(stringified) = 1						// mark entry in "hash" as known
	}
]]></Implementation>
</Method>

<Method name="KillSubtree">
<Description>
if there are some nodes underneath - just kill them</Description>
<FormalSpec>GloRef:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	if GloRef = "" { quit }
	kill @GloRef
]]></Implementation>
</Method>

<Method name="MakePtr">
<Description>
create special $listbuild(42, value) content to recognize pointers from the
average string or numeric</Description>
<CodeMode>expression</CodeMode>
<FormalSpec>S</FormalSpec>
<Implementation><![CDATA[$listbuild(42,S)
]]></Implementation>
</Method>

<Method name="IsPtr">
<Description>
Check whether the passed string value is our "Pointer" or not
[it should be valid $lb and their 1st entry has to be 42 (don't ask)</Description>
<CodeMode>expression</CodeMode>
<FormalSpec>P</FormalSpec>
<Implementation><![CDATA[$listvalid(P) && ($list(P,1) = 42)
]]></Implementation>
</Method>

<Method name="GetPtr">
<Description>
Extract actual pointer value from their encoded $lb(42,Ptr)</Description>
<CodeMode>expression</CodeMode>
<FormalSpec>P</FormalSpec>
<Implementation><![CDATA[$list(P,2)
]]></Implementation>
</Method>

<Method name="Assign">
<Description>
Assign value (scalar or object) to the multi-dimensional node @GloRef</Description>
<FormalSpec>GloRef:%String,Value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if '$isobject(Value) {
		set @GloRef = Value
	} else {
		do ..RetainObjectsRef(Value)

		#dim treeName As %String = Value.DocTreeName
		#dim object As DocumentTree = Value.TreeObject

		do ..KillSubtree(GloRef)		
		set @GloRef = ..MakePtr(object.CalcTreeGloRef($get(object.KnownTrees(treeName))))
	}
]]></Implementation>
</Method>

<Method name="GloRef">
<Description>
Factory method returning "smart-pointer" wrapped as 
##class(TreePtr) object</Description>
<FormalSpec>Property:%String</FormalSpec>
<Implementation><![CDATA[
	#dim ptr As TreePtr = ##class(TreePtr).%New()
	// no extra arguments, access to the root
	set ptr.TreeObject = $this
	set ptr.DocTreeName = Property
#if 0

	// TODO - allow to create pointers pointing inside of tree
	//        no only their root
	if $get(Args) > 0 {
		
	}
#endif

	return ptr
]]></Implementation>
</Method>

<Method name="GetValue">
<Description>
actual implementation of a getter, given @GloRef reference</Description>
<FormalSpec>GloRef:%String</FormalSpec>
<Implementation><![CDATA[
	if GloRef = "" {
		return ..DefaultValue
	}
	#dim value As %String
	
	// 1. fast-track
	if $data(@GloRef, value)#2 {
		if '..IsPtr(value) {
			return value
		}
	}
	// 2. slow track
	
	// 2.1. check translation cache
	// TODO
	
	// 2.2. proceed full walk
	// FIXME - we will just ignore namespace if any
	#dim prefixName As %String = $qsubscript(GloRef, 0)
	#dim len As %Integer = $qlength(GloRef)
	#dim i As %Integer
	#dim sub As %String 
	#dim preRef As %String = prefixName
	for i=1:1:len {
		set sub = $qsubscript(GloRef, i)
		set preRef = $name(@preRef@(sub))
		
		// if we found intermediate data node
		// then check whether it's pointer, and dereference it
		// and stay at the same index
		if $data(@preRef, value)#2 && ..IsPtr(value) {
			set preRef = ..GetPtr(value)
		} 
	}
	// we are succeeded only if we get to the end of subscripts
	return $get(@preRef, ..DefaultValue)
]]></Implementation>
</Method>

<Method name="GetMultiArray">
<Description>
Getter for unknown multidimensional property (i.e. DocumentContent)
silently invokes tree walker</Description>
<FormalSpec>Property:%String,OffsetSubs:%String="",Args...</FormalSpec>
<Implementation><![CDATA[
	#dim gloRef As %String = $get(..KnownTrees(Property))
	#dim encodedSubs = ""

	if gloRef '= "" {
		set gloRef = ..CalcTreeGloRef(gloRef, .encodedSubs, Args...)
		if OffsetSubs '= "" {
			set gloRef = $name(@gloRef@(OffsetSubs))
		}
		return ..GetValue(gloRef)
	} else {
		return ""
	}
]]></Implementation>
</Method>

<Method name="%DispatchMethod">
<FormalSpec>Method:%String,Args...</FormalSpec>
<Implementation><![CDATA[	return ..GetMultiArray(Method, "", Args...)
]]></Implementation>
</Method>

<Method name="SetMultiArray">
<Description>
Setter for unknown multidimensional property</Description>
<FormalSpec>Property:%String,OffsetSubs:%String="",Val,Subs...</FormalSpec>
<Implementation><![CDATA[
	#dim gloRef As %String = $get(..KnownTrees(Property))
	if gloRef = "" {
		set gloRef = ..AddTree(Property)
	}
	if OffsetSubs '= "" {
		set gloRef = $name(@gloRef@(OffsetSubs))
	}
	#dim encodedSubs As %List = ""

	if gloRef '= "" {
		set gloRef = ..CalcTreeGloRef(gloRef, .encodedSubs, Subs...)
		do ..Assign(gloRef, Val)
	}
]]></Implementation>
</Method>

<Method name="%DispatchSetMultidimProperty">
<FormalSpec>Property:%String,Val,Subs...</FormalSpec>
<Implementation><![CDATA[	do ..SetMultiArray(Property, "", Val, Subs...)
]]></Implementation>
</Method>

<Method name="Debug">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set DocTree(1) = 13
	set DocTree(1,1) = 1
	set DocTree(1,3) = 3

	set kDocTree(2) = 26
	set kDocTree(2,2) = 2
	
	merge DocTree(2) = kDocTree
	zw DocTree

	set d = ##class(ZeroCopy.Tree).%New()
	set d.DocTree(1) = 13
	set d.DocTree(1,1) = 1
	set d.DocTree(1,3) = 3
	zw d
	do d.DumpTree("DocTree")
	
	set k = ##class(ZeroCopy.Tree).%New()
	set k.DocTree(2) = 26
	set k.DocTree(2,2) = 2
	zw k
	do k.DumpTree("DocTree")

	write !, "Assignment d(2) = k",!	
	set d.DocTree(2) = k.GloRef("DocTree")
	zw d
	do d.DumpTree("DocTree")
	write ! zw k
	
	write !, "Accessing their nodes",!
	#define D(%s)	write ##quote(%s), ?14, " = ", %s, !
	$$$D(d.DocTree(1))
	$$$D(d.DocTree(1,1))
	$$$D(d.DocTree(1,3))
	$$$D(d.DocTree(2))
	$$$D(d.DocTree(2,2))
	$$$D(d.DocTree(2,2,2))
]]></Implementation>
</Method>
</Class>
</Export>
